(()=>{"use strict";const t=1280,e=1250,n=200,i=300,a=200,o=200,r=235,s=335;let l=t,h=720;const c=(t,e)=>t-e,d=(t,e,a,o)=>{const r=(n*o-n)/2,s=(i*o-i)/2;t.lineWidth=5,t.strokeStyle="#ccc",t.beginPath(),t.rect(p(e-r),p(a-s),p(n*o),p(i*o)),t.stroke()},g=(e,n,i,a)=>e<t&&n>0&&i<720&&a>0,m=t=>t<a?u(t):t>1080?f(t):1,u=t=>Math.max((t+n)/400,.2),f=e=>Math.max((t-e)/n,.2),w=(t,e,n,i,a=200,o=300)=>{t.drawImage(e,p(n),p(i),p(a),p(o))},p=e=>l/t*e;const v="c0140031611f36da79a4001affaad896";let X=[];const b=()=>X.splice(Math.floor(Math.random()*X.length),1)[0],k=(t,e,n,i)=>new Promise(((a,o)=>{fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${v}&language=en-UK`,{method:"GET"}).then((function(t){return t.ok?t.json():Promise.reject(t)})).then((o=>{X=o.genres;const r=[],s=[];r.push(b()),r.push(b()),r.push(b()),r.push(b());let l=0;r.forEach((o=>{var h,c,d,g,m;(h=o.id,c=void 0,d=void 0,g=void 0,m=function*(){const t=`https://api.themoviedb.org/3/discover/movie?with_genres=${h}&sort_by=popularity.desc&vote_count.gte=10&api_key=${v}`,e=yield fetch(t,{method:"GET"});return e.ok?e.json():Promise.reject(e)},new(g||(g=Promise))((function(t,e){function n(t){try{a(m.next(t))}catch(t){e(t)}}function i(t){try{a(m.throw(t))}catch(t){e(t)}}function a(e){var a;e.done?t(e.value):(a=e.value,a instanceof g?a:new g((function(t){t(a)}))).then(n,i)}a((m=m.apply(c,d||[])).next())}))).then((h=>{const{results:c}=h;c.length=10;const d=h.results.map(((a,o)=>{const{original_title:r,overview:s,backdrop_path:h,poster_path:c,release_date:d}=a;return{image:t,cardOriginalPositionX:o*(e+i),cardOriginalPositionY:l*(n+i),original_title:r,overview:s,backdrop_path:h,poster_path:c,release_date:d}})),g={id:o.id,cards:d,rowNumber:l,highlightedCard:0,translateX:0,animationStartTime:null,animationDirection:null,targetTranslateX:0,easingPosition:0,unfinishedMovementX:0};l+=1,s.push(g),s.length===r.length&&a(s)}))}))}))})),T=document.getElementById("canvas");T.width=t,T.height=720;const P=T.getContext("2d");let y,M,_,D,C=o,E=0,S=0,A=0,I=0,O=0,j=[];const x=[37,38,39,40];document.addEventListener("keydown",(t=>{t.preventDefault();const{keyCode:e}=t;if(!x.includes(e))return void console.log("invalid keycode");const n=j[S];switch(clearTimeout(y),y=window.setTimeout((()=>{}),2e3),e){case 37:n.highlightedCard>0&&(n.highlightedCard-=1,n.animationStartTime=Date.now(),n.animationDirection="left",n.unfinishedMovementX=n.unfinishedMovementX+n.targetTranslateX-n.translateX,n.targetTranslateX=n.highlightedCard*r,W());break;case 38:if(S>0){if("down"===D&&_&&_<175)return;S-=1,M=Date.now(),O=O+I-A,I=S*s,D="up",W()}break;case 39:n.highlightedCard<n.cards.length-1&&(n.highlightedCard+=1,n.animationStartTime=Date.now(),n.animationDirection="right",n.unfinishedMovementX=n.unfinishedMovementX+n.targetTranslateX-n.translateX,n.targetTranslateX=n.highlightedCard*r,W());break;case 40:if(S<3){if("up"===D&&_&&_<175)return;S+=1,M=Date.now(),O=O+I-A,I=S*s,D="down",W()}}})),(()=>{const t=(()=>{const t=new Image(n,i);return t.src="./defaultImage.jpg",t})();k(t,n,i,35).then((t=>{j=t,j=((t,e,r)=>(t.forEach(((s,l)=>{s.cards.forEach(((s,h)=>{const u=`https://image.tmdb.org/t/p/w200${s.poster_path}`;var f;(f=u,new Promise(((t,e)=>{const n=new Image;n.onload=()=>t(n),n.onerror=()=>e(new Error(`load ${f} fail`)),n.src=f}))).then((s=>{t[l].cards[h].image=s;const{translateX:u}=t[l],{cardOriginalPositionX:f,cardOriginalPositionY:w}=t[l].cards[h],v=c(f+a,u),X=c(w+o,r);((t,e,r,s)=>{if(g(r,r+n,s,s+i)){const l=r===a&&s===o,h=l?1.2:1,c=(n*h-n)/2,g=(i*h-i)/2,u=m(r);t.globalAlpha=u,t.drawImage(e,p(r-c),p(s-g),p(n*h),p(i*h)),l&&(t.globalAlpha=1,d(t,r,s,h))}})(e,s,v,X)}))}))})),t))(t,P,A),W()}))})();const $=t=>{C>o&&(A=I-s+(s+O)*t),C<o&&(A=I+s-(s-O)*t)},W=()=>{var t;if(P&&(t=>{t.clearRect(0,0,l,h)})(P),C=Math.round(S*s+o+O-A),M){const n=Date.now();_=n-M;let i=_/e;if(_>e||i>1)i=1,M=null,E=1,$(1),_=null;else{const e=(t=i,1-Math.pow(1-t,5));E=e,$(e)}}P&&((t,s,l,h,u,f,p)=>{let v=()=>{};for(let b=0;b<s.length;b++){const k=s[b];let{unfinishedMovementX:T,animationStartTime:P}=k;if(P){const t=Date.now()-P,n=Math.min(t/e,1),i=(X=n,1-Math.pow(1-X,5));k.easingPosition=i,"right"===k.animationDirection?k.translateX=k.targetTranslateX-r+(r+T)*i:"left"===k.animationDirection&&(k.translateX=k.targetTranslateX+r-(r-T)*i),n>=1&&(k.animationStartTime=null)}for(let e=0;e<s[b].cards.length;e++){const r=k.cards[e],{image:X,cardOriginalPositionX:P,cardOriginalPositionY:y}=r,M=c(P+T+a,k.translateX),_=c(y+o+h,u),{highlightedCard:D}=k;if(b===l&&e==D){let e=0;const{easingPosition:a}=s[b];e=a||(f?p:1);const o=.2*e+1,r=(n*o-n)/2,l=(i*o-i)/2;v=()=>{const e=m(M);t.globalAlpha=e,w(t,X,M-r,_-l,n*o,i*o),t.globalAlpha=1,d(t,M,_,o)}}else if(g(M,M+n,_,_+i)){const e=m(M);t.globalAlpha=e,w(t,X,M,_),t.globalAlpha=1}}}var X;v()})(P,j,S,O,A,M,E),P&&(t=>{t.lineWidth=3,t.strokeStyle="darkgreen",t.beginPath(),t.rect(0,0,l,l/1.7777777777777777),t.stroke()})(P),(()=>{var t;let e=!1;if(M)return!0;for(let n=0;n<4;n++)if(null===(t=j[n])||void 0===t?void 0:t.animationStartTime){e=!0;break}return e})()&&window.requestAnimationFrame(W)},Y=()=>{var t,e;t=window.innerWidth,e=window.innerHeight,h=e,l=t,T.height=window.innerHeight,T.width=window.innerWidth,M||(M=100,W())};window.onresize=Y,Y()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,